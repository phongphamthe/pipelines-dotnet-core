name: '$(buildCounter)'

#Test CI trigger 2

parameters:
- name: deployToDev
  type: boolean
  default: false

variables:
  - name: buildCounter
    value: $[counter(format('{0:dd}', pipeline.startTime), 1)]
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  - name: isDev
    # TODO: revert back after testing
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/feature/deploy-to-dev-v1')]

pool:
  name: $(poolName)
  vmImage: $(poolvmImage)

stages:
- stage: Build
  displayName: 'Build source code'
  condition: succeeded()
  jobs:
    - job: Checkout_and_Build_Job
      displayName: 'Checkout & Build Project'
      steps:
        
        - checkout: self
          persistCredentials: true
          fetchDepth: 0

        - bash: |
            echo "Build.SourcesDirectory = $(Build.SourcesDirectory)"
            echo "Buid.BuildNumber = $(Build.BuildNumber)"
            echo "Build.Repository.Name = $(Build.Repository.Name)"
            ls $(Build.SourcesDirectory)

        # - task: UseDotNet@2
        #   displayName: Use .NET $(dotnetVersion)
        #   inputs:
        #     packageType: 'sdk'
        #     version: '$(dotnetVersion)'

        # - script: dotnet test $(testProjectPath)  --logger "trx;LogFileName=test-results.trx" --collect "Code coverage"
        # - task: PublishTestResults@2
        #   condition: succeededOrFailed()
        #   inputs:
        #     testRunner: VSTest
        #     testResultsFiles: '**/test-results.trx'
        #     searchFolder: '$(System.DefaultWorkingDirectory)'
        #     mergeTestResults: true
        # - task: PublishCodeCoverageResults@1
        #   displayName: 'Publish code coverage report'
        #   inputs:
        #     codeCoverageTool: 'Cobertura'
        #     summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'    

- stage: Publish_Docker_Image
  displayName: 'Publish Docker Image'
  dependsOn:
    - Build
  condition: or(eq(variables['isDev'], 'true'), ${{ eq(parameters.deployToDev, true) }}, eq(variables['isMain'], 'true'))
  jobs:
    - job: Publish_Docker_Image
      displayName: 'Publish docker image'
      steps:
      
        - checkout: self
          clean: true
          persistCredentials: true

        - task: Bash@3
          name: SetBuildInfo
          displayName: 'Set build info'
          inputs:
            targetType: 'inline'
            script: |
              commitID=$BUILD_SOURCEVERSION
              echo "##vso[task.setvariable variable=imageTag;isOutput=true]${commitID:0:7}"
              
        - task: Docker@2
          displayName: 'Build $(serviceName) image'
          inputs:
            command: build
            dockerfile: '$(dockerFilePath)'
            buildContext: './'
            repository: 'sd5294containerregistry.azurecr.io'
            tags: '$(SetBuildInfo.imageTag)'