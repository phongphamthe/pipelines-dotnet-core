name: '$(buildCounter)'

#Test CI trigger 2

parameters:
- name: deployToDev
  type: boolean
  default: false

variables:
  - name: buildCounter
    value: $[counter(format('{0:dd}', pipeline.startTime), 1)]
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  - name: isDev
    # TODO: revert back after testing
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/feature/deploy-to-dev-v1')]

pool:
  name: $(poolName)
  vmImage: $(poolvmImage)

stages:
- stage: Build
  displayName: 'Build source code'
  condition: succeeded()
  jobs:
    - job: Checkout_and_Build_Job
      displayName: 'Checkout & Build Project'
      steps:
        
        - checkout: self
          persistCredentials: true
          fetchDepth: 0

        - bash: |
            echo "Build.SourcesDirectory = $(Build.SourcesDirectory)"
            echo "Buid.BuildNumber = $(Build.BuildNumber)"
            echo "Build.Repository.Name = $(Build.Repository.Name)"
            ls $(Build.SourcesDirectory)

        # - task: UseDotNet@2
        #   displayName: Use .NET $(dotnetVersion)
        #   inputs:
        #     packageType: 'sdk'
        #     version: '$(dotnetVersion)'

        # - script: dotnet test $(testProjectPath)  --logger "trx;LogFileName=test-results.trx" --collect "Code coverage"
        # - task: PublishTestResults@2
        #   condition: succeededOrFailed()
        #   inputs:
        #     testRunner: VSTest
        #     testResultsFiles: '**/test-results.trx'
        #     searchFolder: '$(System.DefaultWorkingDirectory)'
        #     mergeTestResults: true
        # - task: PublishCodeCoverageResults@1
        #   displayName: 'Publish code coverage report'
        #   inputs:
        #     codeCoverageTool: 'Cobertura'
        #     summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'    

- stage: Publish_Docker_Image
  displayName: 'Publish Docker Image'
  dependsOn:
    - Build
  condition: or(eq(variables['isDev'], 'true'), ${{ eq(parameters.deployToDev, true) }}, eq(variables['isMain'], 'true'))
  jobs:
    - job: Publish_Docker_Image
      displayName: 'Publish docker image'
      steps:
      
        - checkout: self
          clean: true
          persistCredentials: true

        - task: Bash@3
          name: SetBuildInfo
          displayName: 'Set build info'
          inputs:
            targetType: 'inline'
            script: |
              commitID=$BUILD_SOURCEVERSION
              echo "##vso[task.setvariable variable=imageTag;isOutput=true]${commitID:0:7}"
              
        - task: Docker@2
          displayName: 'Build $(serviceName) image'
          inputs:
            command: build
            dockerfile: '$(dockerFilePath)'
            buildContext: './'
            repository: 'sd5294containerregistry.azurecr.io'
            tags: '$(SetBuildInfo.imageTag)'

        - task: trivy@1
          displayName: 'trivy (injected)'
          inputs:
            # The version of Trivy to use
            # Default: 1.5.0
            version: '$(trivy__version)'
            
            # Run Trivy using the aquasec/trivy docker image
            # This can be useful when being rate limited by dockerhub etc.
            # Default: false
            docker: $(trivy__docker)

            # Use Docker login task DockerConfig
            # Use DOCKER_CONFIG ENV as DockerConfig (set by Docker login task).
            # loginDockerConfig: $(trivy__loginDockerConfig)

            # Enable debug logging in build output
            debug: $(trivy__debug)
        
            # The path to scan
            # The specified path will be scanned using an 'fs' scan type. If this option is used, the 'image' option cannot be set.
            # path: $(trivy__path)

            # The image to scan
            # The specified image will be scanned using an 'image' scan type. If this option is used, the 'path' option cannot be set.
            # image: $(trivy__image)

            # The severities (CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN) to include in the scan (comma sperated)
            # The specified path or image will be scanned for the provided serverities.
            severities: '$(trivy__severities)'

            # Ignore unpatched/unfixed vulnerabilities
            # This means you can't fix these vulnerabilities even if you update all packages.
            ignoreUnfixed: $(trivy__ignoreUnfixed)

            # Exit code when Trivy detects issues.
            # Set this to 0 to prevent the build failing when Trivy detects issues.
            exitCode: $(trivy__exitCode)

            # Aqua API Key
            # The Aqua API Key is used to upload scan results to your Aqua Security account.
            # aquaKey: $(trivy__aquaKey)

            # Aqua API Secret
            # The Aqua API Secret is used to upload scan results to your Aqua Security account.
            # aquaSecret: $(trivy__aquaSecret)

            # TODO
            image: '$(trivy__image)'

            # Additional Options
            # Additional flags to pass to Trivy command line.
            options: $(trivy__options)      